{"version":3,"sources":["components/Form/Form.js","components/Modal/Modal.js","components/Header/Header.js","components/Question/Question.js","components/Answer/Answer.js","components/Button/Button.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","state","question","answers","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","modalCallback","cRUD","className","onSubmit","type","onClick","onChange","placeholder","Component","Modal","activeModal","ReactDOM","createPortal","document","getElementById","Header","Question","Answer","btnCallback","answer","Button","btnClass","btnName","url","App","buildQuestion","correct_answer","incorrect_answers","category","difficulty","deleteQuestion","fetch","questionObj","_id","method","headers","then","res","json","console","log","nextQuestion","questionsUpdate","questions","pop","catch","error","editQuestion","split","map","trim","shift","data","body","JSON","stringify","shuffle","unshift","correctIdx","indexOf","CRUD","addQuestion","checkCRUD","crudOrNull","toggleModal","answersHTMLCollection","Array","from","forEach","li","style","backgroundColor","color","lastQuestion","push","handleCrudEvent","textContent","handleAnswerEvent","parentElement","children","setTimeout","something","randomUnshuffledThing","numUnshuffled","length","Math","floor","random","getQuestions","answersList","idx","key","buttonList","toUpperCase","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fddbe445.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Form.css\";\n\n// React forms https://reactjs.org/docs/forms.html#gatsby-focus-wrapper\nclass Form extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t// value: \"\",\n\t\t\tquestion: \"\",\n\t\t\tanswers: \"\",\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tthis.setState({ [e.target.name]: e.target.value });\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.modalCallback(null, this.state.question, this.state.answers);\n\t}\n\n\trender() {\n\t\t// className={this.props.className}\n\t\tif (this.props.cRUD === \"DELETE\") {\n\t\t\treturn (\n\t\t\t\t<form className=\"form form-add\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type=\"submit\" value=\"Delete Question\" />\n\t\t\t\t\t<p className=\"cancel\" onClick={this.props.modalCallback}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<form className=\"form form-add\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tQuestion:\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"question\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={this.state.question}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<label>\n\t\t\t\t\t\tAnswers:\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"answers\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={this.state.answers}\n\t\t\t\t\t\t\tplaceholder=\"Up to 4 separated by commas - first is correct\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t<p className=\"cancel\" onClick={this.props.modalCallback}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t);\n\t\t} //if/else\n\t} //render()\n} //Form\n\nexport default Form;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Modal.css\";\nimport Form from \"../Form/Form\";\n\n// let App = document.querySelector(\".App\");\n\nfunction Modal(props) {\n\tconst { activeModal, modalCallback, cRUD } = props;\n\tif (activeModal) {\n\t\treturn ReactDOM.createPortal(\n\t\t\t<div className=\"modal\">\n\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t<Form modalCallback={modalCallback} cRUD={cRUD} />\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t\tdocument.getElementById(\"root\")\n\t\t);\n\t} else {\n\t\t//* saves a space in the DOM with \"<div></div>\"\n\t\t//* without below, Modal is added below other compoents\n\t\t//* when the modal state changes to active\n\t\treturn ReactDOM.createPortal(<div></div>, document.getElementById(\"root\"));\n\t}\n} //Modal\n\nexport default Modal;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n\treturn (\n\t\t<header>\n\t\t\t<h1 className=\"h1-title\">Question Time</h1>\n\t\t\t<h2 className=\"h2-subtitle\">Is Your Time</h2>\n\t\t</header>\n\t);\n} //Header\n\nexport default Header;\n","import React from \"react\";\nimport \"./Question.css\";\n\nfunction Question(props) {\n\treturn <p className=\"p-question\">{props.question}</p>;\n} //Question\n\nexport default Question;\n","import React from \"react\";\nimport \"./Answer.css\";\n\nfunction Answer(props) {\n\treturn (\n\t\t<li className=\"li-answer\" onClick={props.btnCallback}>\n\t\t\t{props.answer}\n\t\t</li>\n\t);\n} //Answer\n\nexport default Answer;\n","import React from \"react\";\nimport \"./Button.css\";\n\nfunction Button(props) {\n\treturn (\n\t\t<li className={props.btnClass} onClick={props.btnCallback}>\n\t\t\t{props.btnName}\n\t\t</li>\n\t);\n} //Button\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Modal from \"../Modal/Modal\";\nimport Header from \"../Header/Header\";\nimport Question from \"../Question/Question\";\nimport Answer from \"../Answer/Answer\";\nimport Button from \"../Button/Button\";\n\nlet url = \"https://pub-quiz-game.herokuapp.com/history\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactiveModal: false,\n\t\t\tquestions: [],\n\t\t\tquestionObj: {},\n\t\t\tquestion: \"\",\n\t\t\tanswers: [],\n\t\t\tanswer: \"\",\n\t\t\tcorrectIdx: 0,\n\t\t\tCRUD: null,\n\t\t};\n\t} //constructor\n\n\tbuildQuestion = (question, correct_answer, incorrect_answers) => {\n\t\tlet questionObject = {\n\t\t\tincorrect_answers: [...incorrect_answers],\n\t\t\tcategory: \"History\",\n\t\t\ttype: \"multiple\",\n\t\t\tdifficulty: \"hard\",\n\t\t\tquestion: question,\n\t\t\tcorrect_answer: correct_answer,\n\t\t};\n\t\treturn questionObject;\n\t};\n\n\tdeleteQuestion = () => {\n\t\tfetch(`${url}/${this.state.questionObj._id}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((questionObj) => {\n\t\t\t\tconsole.log(`Successfully deleted question:`, questionObj);\n\n\t\t\t\t//* Load next question\n\t\t\t\tthis.nextQuestion();\n\n\t\t\t\t//* Remove question deleted from API from local array\n\t\t\t\tlet questionsUpdate = this.state.questions;\n\t\t\t\tquestionsUpdate.pop();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tquestions: questionsUpdate,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error:\", error);\n\t\t\t});\n\t};\n\n\teditQuestion = (question, answers) => {\n\t\tlet answers_arr = answers.split(\",\");\n\t\tlet incorrect_answers = answers_arr.map((answer) => answer.trim());\n\t\tlet correct_answer = incorrect_answers.shift();\n\t\tlet data = this.buildQuestion(question, correct_answer, incorrect_answers);\n\n\t\tfetch(`${url}/${this.state.questionObj._id}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(data),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((questionObj) => {\n\t\t\t\tconsole.log(`Successfully edited question:`, questionObj);\n\t\t\t\tlet answer = questionObj.correct_answer;\n\t\t\t\tlet answers = this.shuffle([answer, ...questionObj.incorrect_answers]);\n\t\t\t\tlet questionsUpdate = this.state.questions;\n\t\t\t\tquestionsUpdate.shift();\n\t\t\t\tquestionsUpdate.unshift(questionObj);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tquestions: questionsUpdate,\n\t\t\t\t\tquestionObj: questionObj,\n\t\t\t\t\tquestion: questionObj.question,\n\t\t\t\t\tanswer: answer,\n\t\t\t\t\tanswers: answers,\n\t\t\t\t\tcorrectIdx: answers.indexOf(answer),\n\t\t\t\t\tCRUD: null,\n\t\t\t\t}); //setState\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error:\", error);\n\t\t\t});\n\t};\n\n\taddQuestion = (question, answers) => {\n\t\tlet answers_arr = answers.split(\",\");\n\t\tlet incorrect_answers = answers_arr.map((answer) => answer.trim());\n\t\tlet correct_answer = incorrect_answers.shift();\n\t\tlet data = this.buildQuestion(question, correct_answer, incorrect_answers);\n\n\t\tfetch(url, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(data),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((questionObj) => {\n\t\t\t\tconsole.log(`Successfully added question:`, questionObj);\n\t\t\t\tlet answer = questionObj.correct_answer;\n\t\t\t\tlet answers = this.shuffle([answer, ...questionObj.incorrect_answers]);\n\t\t\t\tlet questionsUpdate = this.state.questions;\n\t\t\t\tquestionsUpdate.unshift(questionObj);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tquestions: questionsUpdate,\n\t\t\t\t\tquestionObj: questionObj,\n\t\t\t\t\tquestion: questionObj.question,\n\t\t\t\t\tanswer: answer,\n\t\t\t\t\tanswers: answers,\n\t\t\t\t\tcorrectIdx: answers.indexOf(answer),\n\t\t\t\t\tCRUD: null,\n\t\t\t\t}); //setState\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error:\", error);\n\t\t\t});\n\n\t\t// * Fetch takes data and returns below\n\t\t// {\n\t\t// \t\"incorrect_answers\": [\n\t\t// \t  \"blue cow\",\n\t\t// \t  \"red cow\",\n\t\t// \t  \"deer\"\n\t\t// \t],\n\t\t// \t\"_id\": \"5f3bc6700806650017b269d6\",\n\t\t// \t\"category\": \"History\",\n\t\t// \t\"type\": \"multiple\",\n\t\t// \t\"difficulty\": \"hard\",\n\t\t// \t\"question\": \"How now?\",\n\t\t// \t\"correct_answer\": \"Brown cow\",\n\t\t// \t\"__v\": 0\n\t\t//   }\n\t};\n\n\tcheckCRUD = (crudOrNull, question, answers) => {\n\t\tif (crudOrNull === null) {\n\t\t\tthis.state.CRUD === \"ADD\"\n\t\t\t\t? this.addQuestion(question, answers)\n\t\t\t\t: this.state.CRUD === \"EDIT\"\n\t\t\t\t? this.editQuestion(question, answers)\n\t\t\t\t: this.state.CRUD === \"DELETE\"\n\t\t\t\t? this.deleteQuestion()\n\t\t\t\t: console.log(crudOrNull);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t};\n\n\t// React Docs toggle example: https://reactjs.org/docs/handling-events.html\n\ttoggleModal = (crudOrNull, question, answers) => {\n\t\tif (typeof crudOrNull === \"object\" && crudOrNull !== null) {\n\t\t\t//If user cancelled CRUD operation\n\t\t\tthis.setState({\n\t\t\t\tactiveModal: !this.state.activeModal,\n\t\t\t\tCRUD: null,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.checkCRUD(crudOrNull, question, answers);\n\t\t\tthis.setState({\n\t\t\t\tactiveModal: !this.state.activeModal,\n\t\t\t\tCRUD: crudOrNull,\n\t\t\t});\n\t\t}\n\t}; //toggleModal()\n\n\tnextQuestion = (answersHTMLCollection) => {\n\t\t//* if not undefined...\n\t\tif (answersHTMLCollection) {\n\t\t\t//* reset the li color and background color\n\t\t\tlet listOfLi = Array.from(answersHTMLCollection);\n\t\t\tlistOfLi.forEach((li) => {\n\t\t\t\tli.style.backgroundColor = \"#c0c0c0\";\n\t\t\t\tli.style.color = \"#2958aa\";\n\t\t\t});\n\t\t}\n\n\t\t//* move current question to the end of the questions array\n\t\tlet lastQuestion = this.state.questions.shift();\n\t\tlet questions = this.state.questions;\n\t\tquestions.push(lastQuestion);\n\n\t\t//* set state with new question object\n\t\tlet answer = questions[0].correct_answer;\n\t\tlet answers = this.shuffle([answer, ...questions[0].incorrect_answers]);\n\t\tthis.setState({\n\t\t\tquestions: questions,\n\t\t\tquestionObj: questions[0],\n\t\t\tquestion: questions[0].question,\n\t\t\tanswer: answer,\n\t\t\tanswers: answers,\n\t\t\tcorrectIdx: answers.indexOf(answer),\n\t\t}); //setState\n\t};\n\n\thandleCrudEvent = (e) => {\n\t\t// Check if create, update, or delete\n\t\tlet CRUD = e.target.textContent;\n\t\tthis.toggleModal(CRUD);\n\t}; //handleCrudEvent\n\n\thandleAnswerEvent = (e) => {\n\t\tlet answers = e.target.parentElement.children;\n\t\t//* if clicked answer is wrong\n\t\t//* turn it red\n\t\tif (e.target.textContent !== this.state.answer) {\n\t\t\te.target.style.backgroundColor = \"red\";\n\t\t\te.target.style.color = \"white\";\n\t\t}\n\t\t//* turn the correct answer green\n\t\tanswers[this.state.correctIdx].style.backgroundColor = \"green\";\n\t\tanswers[this.state.correctIdx].style.color = \"white\";\n\n\t\t//* present next question after 3 seconds\n\t\tsetTimeout(() => {\n\t\t\tthis.nextQuestion(answers);\n\t\t}, 2000);\n\t}; //handleAnswerEvent\n\n\t//* shuffle a something array and return it\n\tshuffle = (something) => {\n\t\t//* Based on a Fisher-Yates shuffle: https://www.thwcorbin.com/posts/shuffle-card-deck/\n\t\t//* numUnshuffled is the number of unshuffled things\n\t\tlet numUnshuffled = something.length;\n\t\tlet randomUnshuffledThing;\n\n\t\t//* While unshuffled things remain\n\t\twhile (numUnshuffled) {\n\t\t\t//* Pick random number betweeen 0 inclusive and number of unshuffled things\n\t\t\t//* Then decrement the number of unshuffled things by 1\n\t\t\trandomUnshuffledThing = Math.floor(Math.random() * numUnshuffled--);\n\t\t\t//* Swap the random thing with the last unshuffled thing in the array\n\t\t\t[something[randomUnshuffledThing], something[numUnshuffled]] = [\n\t\t\t\tsomething[numUnshuffled],\n\t\t\t\tsomething[randomUnshuffledThing],\n\t\t\t];\n\t\t}\n\t\treturn something;\n\t}; //shuffle\n\n\tgetQuestions = () => {\n\t\t// * Fetch questions\n\t\tfetch(url)\n\t\t\t.then((res) => {\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet questions = this.shuffle(data);\n\t\t\t\treturn questions;\n\t\t\t})\n\t\t\t.then((questions) => {\n\t\t\t\tlet answer = questions[0].correct_answer;\n\t\t\t\tlet answers = this.shuffle([answer, ...questions[0].incorrect_answers]);\n\t\t\t\tthis.setState({\n\t\t\t\t\tquestions: questions,\n\t\t\t\t\tquestionObj: questions[0],\n\t\t\t\t\tquestion: questions[0].question,\n\t\t\t\t\tanswer: answer,\n\t\t\t\t\tanswers: answers,\n\t\t\t\t\tcorrectIdx: answers.indexOf(answer),\n\t\t\t\t}); //setState\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error:\", error);\n\t\t\t});\n\t}; //getQuestions\n\n\trender() {\n\t\t//* check if answers array is defined\n\t\t//* then build list of answers\n\t\tlet answersList;\n\t\tif (this.state.answers) {\n\t\t\tlet answersArr = this.state.answers;\n\t\t\tanswersList = answersArr.map((answer, idx) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Answer\n\t\t\t\t\t\tclassName=\"li-answer\"\n\t\t\t\t\t\tanswer={answer}\n\t\t\t\t\t\tbtnCallback={this.handleAnswerEvent}\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}); //answerList\n\t\t}\n\n\t\t//* build list buttons\n\t\tlet buttonArr = [\"add\", \"edit\", \"delete\"];\n\t\tlet buttonList = buttonArr.map((btnName, idx) => {\n\t\t\treturn (\n\t\t\t\t<Button\n\t\t\t\t\tbtnClass={`li-btn li-btn-` + btnName}\n\t\t\t\t\tbtnName={btnName.toUpperCase()}\n\t\t\t\t\tbtnCallback={this.handleCrudEvent}\n\t\t\t\t\tkey={idx}\n\t\t\t\t/>\n\t\t\t);\n\t\t}); //buttonList\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Modal\n\t\t\t\t\tactiveModal={this.state.activeModal}\n\t\t\t\t\tmodalCallback={this.toggleModal}\n\t\t\t\t\tcRUD={this.state.CRUD}\n\t\t\t\t/>\n\t\t\t\t<Header />\n\t\t\t\t<Question question={this.state.question} />\n\t\t\t\t<ul className=\"ul-answers\">{answersList}</ul>\n\t\t\t\t<p className=\"youCrud\">\n\t\t\t\t\tYou can also create, update, or delete questions!\n\t\t\t\t</p>\n\t\t\t\t<ul className=\"ul-crud\">{buttonList}</ul>\n\t\t\t</div>\n\t\t); //return\n\t} //render\n\n\tcomponentDidMount() {\n\t\tthis.getQuestions();\n\t} //componentDidMount\n} //App\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}